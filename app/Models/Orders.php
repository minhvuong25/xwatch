<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletes;


/**
 * Class Orders
 * @package App\Models
 */

/**
 * [auto-gen-property]
 * @property int $id
 * @property string $affiliate_user
 * @property string $phone_number
 * @property int $province_id
 * @property int $district_id
 * @property int $ward_id
 * @property string $address
 * @property string $description
 * @property int $amount
 * @property int $created_by
 * @property int $status
 * @property int $payment_method
 * @property int $payment_status
 * @property int $type
 * @property string $email
 * @property string $note
 * @property int $Itemid
 * @property string $deleted_at
 * @property string $created_at
 * @property string $updated_at
 * [/auto-gen-property]
 *
 */
class Orders extends Model
{
    use SoftDeletes;
    protected $table = 'orders';
    const CREATED_AT = 'created_at';
    const UPDATED_AT = 'updated_at';

    const ORDER_STATUS_IS_PENDING = 1; //ĐƠN HÀNG MỚI ĐANG CHỜ XỬ LÝ

    const ORDER_PAYMENT_STATUS_IS_FALSE = -1; // Thanh toán lỗi
    const ORDER_PAYMENT_STATUS_IS_PENDING = 1; // Chờ thanh toán
    const ORDER_PAYMENT_STATUS_IS_COMPLETE = 2; // Đã thanh toán

    public static $orderStatus = [
        // self::ORDER_STATUS_IS_PENDING => "Đơn hàng mới",
        self::ORDER_PAYMENT_STATUS_IS_FALSE => "Đơn hàng bị hủy thanh toán",
        self::ORDER_PAYMENT_STATUS_IS_PENDING => "Đơn hàng chờ thanh toán",
        self::ORDER_PAYMENT_STATUS_IS_COMPLETE => "Đơn hàng đã thanh toán",
    ];

    const ORDER_PAYMENT_METHOD_IS_COD = 1; //Thanh toan khi nhan hang COD
    const ORDER_PAYMENT_METHOD_IS_VNP = 2; //Thanh toán chuyen khoan


    public static $paymentMethod = [
        self::ORDER_PAYMENT_METHOD_IS_COD => "Thanh toán khi nhận hàng",
        self::ORDER_PAYMENT_METHOD_IS_VNP => "Thanh toán qua chuyển khoản",
    ];
    const ORDER_CODE = 'BOTA';
    /**
     * The primary key for the model.
     *
     * @var string $primaryKey
     */
    protected $primaryKey = 'id';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    protected $fillable = [
        # [auto-gen-attribute]
        'affiliate_user',
        'phone_number',
        'province_id',
        'district_id',
        'ward_id',
        'address',
        'description',
        'amount',
        'created_by',
        'status',
        'payment_method',
        'payment_status',
        'type',
        'email',
        'Itemid',
        'total_price',
        'order_code',
        'note'
        
        # [/auto-gen-attribute]
    ];

    public function items()
    {
        return $this->hasMany(OrderItem::class, "order_id", "id");
    }

    public function province()
    {
        return $this->hasOne(Province::class, "province_id", "province_id");
    }

    public function district()
    {
        return $this->hasOne(District::class, "district_id", "district_id");
    }

    public function ward()
    {
        return $this->hasOne(Wards::class, "ward_id", "ward_id");
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($query) {
            $query->order_code = self::ORDER_CODE. time();
        });
    }
}
