<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;

/**
 * Class Category
 * @package App\Models
 */

/**
 * [auto-gen-property]
 * @property int $id
 * @property int $parent_id
 * @property string $name
 * @property string $slug
 * @property string $parent_path
 * @property string $children_path
 * @property int $position
 * @property string $description
 * @property string $deleted_at
 * @property string $created_at
 * @property string $updated_at
 * [/auto-gen-property]
 *
 */
class Category extends Model
{
    /**
     * The table associated with the model.
     *
     * @var string $table
     */
    protected $table = 'categories';

    /**
     * The primary key for the model.
     *
     * @var string $primaryKey
     */
    protected $primaryKey = 'id';

    /**
     * The attributes that are mass assignable.
     *
     * @var array
     */
    const CREATED_AT = 'created_at';
    const UPDATED_AT = 'updated_at';


    const CATEGORY_STATUS_IS_ACTIVE = 1;
    const CATEGORY_STATUS_IS_NOT_ACTIVE = -1;

    protected $fillable = [
        # [auto-gen-attribute]
        'parent_id',
        'name',
        'slug',
        'parent_path',
        'children_path',
        'position',
        'description',
        'status',
        'is_home',
        'is_special',
        'image'
        # [/auto-gen-attribute]
    ];

    /**
     * The attributes that should be casted to native types.
     *
     * @var array
     */
    protected $casts = [
        'id' => 'integer',
        'parent_id' => 'integer',
        'name' => 'string',
        'slug' => 'string',
        'parent_path' => 'string',
        'children_path' => 'string',
        'position' => 'integer',
        'description' => 'string',
        'status' => 'integer',
    ];

    /**
     * Validation rules
     *
     * @var array
     */
    public static $rules = [
        'parent_id' => 'required|integer',
        'name' => 'required|string|max:250',
        'status' => 'required|integer',
        'description' => 'nullable|string',
        'created_at' => 'nullable',
        'updated_at' => 'nullable',
        'is_home' => 'nullable',
        'is_special' => 'nullable',
        'image' => 'nullable'
    ];

    public function brands()
    {
        return $this->belongsToMany(Brand::class, 'category_brands');
    }

    public function seoContent()
    {
        return $this->hasOne(SeoContent::class, 'entity_id', 'id');
    }

    public function categories()
    {
        return $this->hasMany(Category::class, 'parent_id', 'id')->where('status', Category::CATEGORY_STATUS_IS_ACTIVE);
    }

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub
        static::creating(function ($query) {
            $query->slug = Str::slug($query->name);
        });

        static::updating(function ($query) {
            $query->slug = Str::slug($query->name);
        });
    }
}
